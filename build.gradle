buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        url = 'https://maven.minecraftforge.net/'
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io/"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        url = "https://maven.tterrag.com/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url  "https://maven.shedaniel.me/"
    }
    maven {
        name = "Modmaven"
        url = "https://modmaven.dev/"
    }
    maven {
        url "https://cursemaven.com"
    }
    mavenLocal()
    maven {
        name = '100Media'
        url = 'https://maven.100media.dev/'
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            //property 'mixin.env.disableRefMap', 'true'

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                dsurround {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                dsurround {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'dsurround', '--all', '--output', file('src/generated/resources/')

            mods {
                dsurround {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

mixin {
    add sourceSets.main, "mixins.dsurround.refmap.json"
    config 'mixins.dsurround.json'
    config 'mixins.sndctrl.json'
    config 'mixins.mobeffects.json'
    config 'mixins.environs.json'
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
configurations {
    implementation.extendsFrom shadow
}
dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // implementation fg.deobf("curse.maven:SereneSeasons-291874:3621343")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")

    runtimeOnly fg.deobf("curse.maven:jei-238222:${jei_file_id}")
    runtimeOnly fg.deobf("curse.maven:the-one-probe-245211:${the_one_probe_file_id}")

    // Capability Syncer
    shadow fg.deobf("dev._100media.capabilitysyncer:capabilitysyncer:${capabilitysyncer_version}")
}

jar {
    archiveClassifier = 'slim'
    from(configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }

    // Add CREDITS.md
    into('/') {
        from('CREDITS.md')
    }

    manifest {
        attributes([
                "Specification-Title": "${mod_id}",
                "Specification-Vendor": "OreCruncher",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" : "OreCruncher",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def relocateTargets = ['dev._100media.capabilitysyncer']
shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shadow]
    relocateTargets.forEach {
        relocate it, "${project.group}.relocated.$it"
    }
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

afterEvaluate {
    jar.finalizedBy reobfJar
    reobfShadowJar.dependsOn shadowJar
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
